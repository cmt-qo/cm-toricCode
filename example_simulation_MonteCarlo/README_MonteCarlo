This folder contains all necessary codes to run a simulation of the correction process. The default 
lattice length is set to L=4. 

####################### COMPILING THE CODE ###########################################################

The provided codes ending with ".cc" use the standard c++ library and no additional packages. They can
be compiled using the command "make".
The executable "run_MC" is produced.

A c++11 compliant compiler is assumed. Parallel programming using OpenMP is used.
These codes are used to calculate expectation values via Monte Carlo sampling.


The provided codes ending with ".py" use Python 2.7 and the TensorFlow library.
These codes are used to evaluate a pre-trained neural network.

######################################################################################################


########################## RUNNING A SIMULATION ######################################################
Minimal usage:
Once compiled, the necessary steps to run a simulation with 4 correction iterations are contained in 
the script "run.sh". 
To run, the user may give permission with "chmod +x run.sh" and execute the script with the command 
"./run.sh".

The simulation should run in less than 5 minutes on a standard laptop.


Outcome of the simulation are the following files:
'rbl_x0.txt', 'rbl_z0.txt': these are the initial field configurations
'rbl_x.txt', 'rbl_z.txt': these are the final field configurations after 4 iterations
The field configurations can be compared.
In addition, in every iteration step the probability of a single qubit error and the Hamiltonian error
are calculated and printed.


######################################################################################################


######################### ADDITIONAL DESCRIPTION OF THE SIMULATION ###################################

A detailed description of the steps executed by the script 'run.sh' is given in the following, but
is only given for completeness and NOT NECESSARY to read for usage.

The script executes the given codes in the following order:

1) "make_rbl.py": creates random initial field configurations stored in the files "rbl_x.txt" 
(fields in z-direction) and "rbl_z.txt" (fields in x-direction) together with copies "rbl_x0.txt" and 
"rbl_z0.txt". To test for field configurations of a different type, the file "make_rbl.py" can be 
changed accordingly as long as solubility is preserved.

2) "make_restr_file.py": takes "rbl_x.txt" and "rbl_z.txt" as inputs and creates the file 
"correctx.txt", restricting the correction such that the model is kept solvable (no fields introduced 
in correction process such that fields of both x- and z-type are on the same spin)

3) "run_MC": takes field configurations "rbl_x.txt" and "rbl_z.txt" and outputs expectation 
values "expv_x.txt" and "expv_z.txt" calculated via Monte Carlo sampling in the structure [nspins,3]. 
Each row corresponds to one spin and contains all stabilizer expectation values of X-loops 
("expv_x.txt") and Z-loops ("expv_z.txt")
In addition, the expectation values "sign_x.txt" and "sign_z.txt" calculated via Monte Carlo sampling 
are outputted in the structure [nspins,1]. Each row corresponds to one spin and contains the 
expectation value of sigma_z (sigma_x) measured on that spin

4) "eval_network_soluble_state.py": takes expectation values "expv_x.txt" and "expv_z.txt" as input and estimates 
absolute values of field configurations. With the additional input of "sign_x.txt" and "sign_z.txt", 
the signs of the field configurations are estimated and the field configurations "rbl_x.txt" and 
"rbl_z.txt" corrected using the estimated values.
The corrected "rbl_x.txt" and "rbl_z.txt" can be compared with the initial configurations "rbl_x0.txt" 
and "rbl_z0.txt"

5) The steps 3)-4) correspond to one iteration. They are repeated 4 times and in every step the 
probability of a single qubit error as well as the Hamiltonian error are calculated and printed. The 
field configurations obtained after 4 iterations "rbl_x.txt" and "rbl_z.txt" can be compared with 
initial field configurations "rbl_x0.txt" and "rbl_z0.txt" with respect to the magnitude of the 
remaining fields.

######################################################################################################


################################## CHANGING THE LATTICE LENGTH #######################################

The simulation is chosen to run for a lattice length L=4 such that all 4 iterations should take no 
longer than 5 minutes. To change the lattice length, the user may change the parameter L in all codes 
(global parameter) and load the corresponding checkpoints in the code "evaluate_network_soluble_state.py". The 
checkpoints for the lattice lengths L=3,4,8,12,16,20,24 are available. The user should note that a 
parallelization to more threads might be necessary to run the simulation in a reasonable time. The 
number of threads is set to 4, but can be changed to exploit the number of cores of the given computer.

######################################################################################################
